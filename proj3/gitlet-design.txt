Gitlet Design Document
----------------------
The overall premise for the project is to replicate the functionality of git
but locally and through a program. The essence of this is simpler than git,
but allows a lot of the stuff we typically use from git.

Classes and Data Structures
---------------------------
There are a variety of data structures used within classes. The main classes are:

Blob - the blob class contains a file's name and the contents it has, both
in a string format and a byte array format. The former allows us to deal with merges
and the later allows us to deal with overwriting files easily.

Commit - this class contains a time, message and a hashmap of references to blob values.
The HashMap is a string to string hashmap with the names of files as the key and the hash
value of the blob that contains that file. The blob are stored as files in a .gitlet directory
named by their hash value. Thus retrieves a blob is as easy as finding the file you
want to retrieve and then getting the hash and reading the file that has that name,
casting it to a blob and then retrieves the file contents from it. This also implements
serializable which makes it easy because it allows us to store hash references to the commits
instead of the actual commits.

Stage - This class maintains our staging area. It essentially contains the ability to add or
remove to the stage. It contains a HashMap as well mapping a files names to its blob value.
It also maintains the ability to clear the staging area which means deleting the references to blob's
that it has and getting rid of redundant files.

Gitlet - This contains a variety of data structures. It contains untracked files, which are
all the files that we aren't tracking at the moment, i.e that we have called remove on. We also
have tracked which entails which files we are tracking and should go into a commit. Furthermore,
we have branches which tracks all the active branches we have at the moment, and we have branchheads
which is a hashmap mapping the various branches to the commit hash that is the branch's head.
We have commits which contains each commit's hash that has every been committed and the String
current branch which retrieves which string we are currently on. The boolean inited tells us if
the system has been initialized or not.

Algorithms
----------
Algorithms are used for each command that we have.

Stage
add(String file) -> add the file to the HashMap, and create a Blob instance with that file in it
and add the name and hash value to the HashMap in Stage
remove(String file) -> If the file is in the hashmap, remove it from the hashmap. Also delete the old blob
hash from the system to avoid redundant files.
contains(String file) -> Returns whether or not that a file's name is in the staging area
clear() -> Clears the staging area
Stage() -> Contstructor that initializes an empty HashMap

Blob
Blob(String file) -> adds file name to the name, and adds the file's name content
to the string and byte class
All other methos just retrieve the contents

Gitlet
Gitlet() -> set init to false and all other data structures to false
init() -> creates a new .gitlet subdirectory if one doesn't exist and create a new
master branch and a new initial commit to add to the log
add(String file) -> see if the file exists and if it doesnt throw an error. If it does,
add it to the staging area, unless it is identical to the previous commit and then remove
it.
remove(String file) -> if the file is tracked or staging, than remove it from the tracking
and the stage otherwise throw error
commit(String file) -> Check to see if the commit is different from the previous commit and
if it is the same then it throws an error.


Persistence
-----------
